- name: Login to robin cluster
  shell: /root/bin/robin login {{ robin_user  }} --password {{ robin_pass }}
  when: inventory_hostname in groups['primary-master'][0]
  
- name: update suicide threshold
  shell: source /root/.bash_profile && robin config update agent suicide_threshold 40
  args:
      executable: /bin/bash
  when: inventory_hostname in groups['primary-master']

- name: get suicide threshold
  shell: source /root/.bash_profile && robin config list agent suicide_threshold --headers Value
  args:
      executable: /bin/bash
  register: suicide_threshold
  when: inventory_hostname in groups['primary-master']

- name: verify if suicide threshold set to 40
  assert:
    that: suicide_threshold.stdout == '40'
    fail_msg: "not updated"
    success_msg: "updated value = {{ suicide_threshold.stdout }}" 
  when: inventory_hostname in groups['primary-master']



- name: Enable nfs monitor schedule 
  shell: source /root/.bash_profile && robin schedule enable "NFS Server" Monitor
  args:
      executable: /bin/bash
  when: inventory_hostname in groups['primary-master']

- name: Fetch nfs monitor schedule status
  shell: source /root/.bash_profile && robin schedule list --function Monitor --headers Enabled
  args:
      executable: /bin/bash
  register: nfs_server_monitor
  when: inventory_hostname in groups['primary-master']

- name: verify if NFS server monitor schdule is enabled
  assert:
    that: nfs_server_monitor.stdout == 'True'
    fail_msg: " Failed to Enable NFS server monitor"
    success_msg: "Enabled value = {{ nfs_server_monitor.stdout }}"
  when: inventory_hostname in groups['primary-master']



- name: update check helm apps to false
  shell: source /root/.bash_profile && robin config update cluster check_helm_apps False
  args:
      executable: /bin/bash
  when: inventory_hostname in groups['primary-master']

- name: get helm apps check config value
  shell: source /root/.bash_profile && robin config list cluster check_helm_apps --headers Value
  args:
      executable: /bin/bash
  register: helm_apps_check
  when: inventory_hostname in groups['primary-master']

- name: verify if check helm apps set to false
  assert:
    that: helm_apps_check.stdout == 'False'
    fail_msg: "not updated"
    success_msg: "updated value = {{ helm_apps_check.stdout }}" 
  when: inventory_hostname in groups['primary-master']



- name: Fetch IP from /etc/kubernetes/kubelet.conf
  shell: cat /etc/kubernetes/kubelet.conf |grep server |awk -F':' '{print $3}'| cut -d'/' -f3
  register: ip
  when: inventory_hostname in groups['master']  

- name: debug vip and ip
  debug:
    msg: "{{ vip }} {{ ip.stdout }}"
  when: inventory_hostname in groups['master']

- name: revert /etc/kubernetes/kubelet.conf with vip and port 36443
  shell: | 
    sed -i 's/{{ ip.stdout}}/{{ vip }}/g' /etc/kubernetes/kubelet.conf
    sed -i 's/6443/36443/g' /etc/kubernetes/kubelet.conf
    systemctl restart kubelet
    systemctl status kubelet
  register: kubelet_status  
  when: inventory_hostname in groups['master'] and ip.stdout != vip

- name: debug kubelet status
  debug:
    msg: "{{ kubelet_status.stdout }}"
  when: inventory_hostname in groups['master'] and ip.stdout != vip


- name: Get robin/k8s webhooks
  shell: kubectl get mutatingwebhookconfigurations -A | grep robin
  register: webhooks
  when: inventory_hostname in groups['primary-master']

- name: get count of webhooks
  shell: kubectl get mutatingwebhookconfigurations -A | grep robin | wc -l
  register: webhooks_count
  when: inventory_hostname in groups['primary-master']

- name: get count of k8s webhooks
  shell: kubectl get mutatingwebhookconfigurations -A | grep k8s | wc -l
  register: webhooks_count_k8s
  when: inventory_hostname in groups['primary-master']

- name: Verify if 8 webhooks are present
  assert:
    that: webhooks_count.stdout | int == 8
    fail_msg: "webhooks are missing"
    success_msg: "webhooks are present" 
  when: inventory_hostname in groups['primary-master']

- name: debug webhooks
  debug:
    msg: "{{ webhooks.stdout }}"
  when: inventory_hostname in groups['primary-master']

- name: Fixing k8s webhooks
  shell: kubectl delete pod -n robinio -l app=robink8s-serverext
  when: inventory_hostname in groups['primary-master'] and webhooks_count_k8s.stdout | int < 4

- name: Fixing robin webhooks
  shell: kubectl delete pod -n robinio -l app=robin-master
  when: inventory_hostname in groups['primary-master'] and webhooks_count_k8s.stdout | int == 4 and webhooks_count.stdout | int < 8 




- name: Verify if sriov plugin updated to latest version
  shell: kubectl describe ds -n kube-system  kube-sriov-device-plugin-amd64 | grep -i image | awk -F":" '{print $3}'
  register: sriov_version
  when: inventory_hostname in groups['primary-master']

- name: update sriov device plugin version to latest v3.7.0 
  shell: |
    {{ artifactory_folder }}{{ robin_version }}/k8s-script-{{ os_version }}-{{ robin_version }}.sh extract
    sed -i '43d' /tmp/k8s_pkgs/intel-sriovdp-ds.yaml
    sed -i '43d' /tmp/k8s_pkgs/intel-sriovdp-ds.yaml
    sed -i 's/IMAGE_REGISTRY\///g' /tmp/k8s_pkgs/intel-sriovdp-ds.yaml 
    kubectl apply -f /tmp/k8s_pkgs/intel-sriovdp-ds.yaml
  when: inventory_hostname in groups['primary-master'] and sriov_version.stdout != 'v3.7.0'

- name: REVerify if sriov plugin updated to latest version
  shell: kubectl describe ds -n kube-system  kube-sriov-device-plugin-amd64 | grep -i image | awk -F":" '{print $3}'
  register: sriov_version1
  when: inventory_hostname in groups['primary-master']

- name: debug sriob device plugin version
  debug:
    msg: "{{ sriov_version1.stdout }}"
  when: inventory_hostname in groups['primary-master']

- name: Verify if sriov plugin updated to latest version
  assert:
    that: sriov_version1.stdout == 'v3.7.0'  
    fail_msg: "failed to update"
    success_msg: "updated to v3.7.0"
  when: inventory_hostname in groups['primary-master']




- name: Enable auto-rebalance
  shell: |
    source /root/.bash_profile && robin login {{ robin_user }} --password {{ robin_pass }} >/dev/null
    robin config update server disk_used_space_high_watermark 90
  args:
    executable: /bin/bash  
  register: high_water_mark
  when: inventory_hostname in groups['primary-master']

- name: Verify if auto disk rebalance is enabled
  assert:
    that: high_water_mark.stdout | int < 100
    fail_msg: "auto disk rebalance is not enabled"
    success_msg: "enabled"
  when: inventory_hostname in groups['primary-master']




- name: Enable autopilot for apps
  shell: |
    source /root/.bashrc 
    for app in $(robin app list --header name); do robin ap enable --app $app --wait; done
  args:
    executable: /bin/bash  
  when: inventory_hostname in groups['primary-master']

- name: Fetch autopilot status
  shell: |
    source /root/.bashrc 
    for app in $(robin app list --header name); do robin app info $app | grep -i autopilot| cut -d':' -f2; done
  args:
    executable: /bin/bash  
  register: autopilot
  when: inventory_hostname in groups['primary-master']

- name:  autopilot status for all apps
  debug:
    msg: "{{ autopilot.stdout_lines | length }}" 
  when: inventory_hostname in groups['primary-master']

- name: Capture autopilot status for all robin apps
  set_fact: 
    robin_autopilot_status: "{{ autopilot.stdout_lines | map('trim') | select('eq', 'Enabled')| list | length == autopilot.stdout_lines | length }}"
  when: inventory_hostname in groups['primary-master']

- name: Verify if auto pilot is enabled for app
  assert:
    that: robin_autopilot_status == true
    fail_msg: "auto pilot is not enabled"
    success_msg: "Enabled"
  when: inventory_hostname in groups['primary-master']



- name: Robin server validate role-bindings
  shell: |
    source /root/.bashrc
    export -f rbash
    export -f rexec
    rbash master << EOF
    robin-server validate-role-bindings
    EOF
  args:
    executable: /bin/bash  
  register: capture_validate_output
  when: inventory_hostname in groups['primary-master']

- name: debug robin server validate role-bindings output
  debug:
    msg: "{{ capture_validate_output.stdout }}"
  when: inventory_hostname in groups['primary-master']